Xtest <- X[-pos, ]
Ytrain <- Y[pos]
Ytest <- Y[-pos]
Qtrain <- Q[pos]
Qtest <- Q[-pos]
result <- method(X = Xtrain, Y = Ytrain, Q = Qtrain, seed = seed)
XtrinSelected <- result[['X']]
YtrinSelected <- result[['Y']]
QtrinSelected <- result[['Q']]
YtrinSelected <- RSNNS::decodeClassLabels( x = YtrinSelected)
Ytest <- RSNNS::decodeClassLabels( x = Ytest )
model <- RSNNS::mlp(x = XtrinSelected, y = YtrinSelected,
size = networkSize, learnFuncParams = learnFuncParams,
maxit = maxit,
inputsTest = Xtest, targetsTest = Ytest)
model
summary(model)
names(model)
model
model <- RSNNS::mlp(x = XtrinSelected, y = YtrinSelected,
size = networkSize, learnFuncParams = learnFuncParams,
maxit = maxit)
model <- RSNNS::mlp(x = XtrinSelected, y = YtrinSelected,
size = networkSize, learnFuncParams = learnFuncParams,
maxit = maxit,
inputsTest = Xtest, targetsTest = Ytest)
predYtrain <- model$fitted.values
predYtest <- model$fittedTestValues
predYtest
predYtrain
predYtest
predYtrain
predYtest
require('pRoc')
require('pROC')
install.packages('pROC')
require('pROC')
require('caret')
?caret::train
?caret::RMSE
?caret::confusionMatrix
?mlp
caret::confusionMatrix(predYtrain, YtrinSelected)
predYtrain
YtrinSelected
method <- get(functionName)
pos <- sample(length(Y), round((1-trainAndTestRatio) * length(Y)))
Xtrain <- X[pos, ]
Xtest <- X[-pos, ]
Ytrain <- Y[pos]
Ytest <- Y[-pos]
Qtrain <- Q[pos]
Qtest <- Q[-pos]
result <- method(X = Xtrain, Y = Ytrain, Q = Qtrain, seed = seed)
XtrinSelected <- result[['X']]
YtrinSelected <- result[['Y']]
QtrinSelected <- result[['Q']]
YtrinSelected <- RSNNS::decodeClassLabels( x = YtrinSelected)
Ytest <- RSNNS::decodeClassLabels( x = Ytest )
model <- RSNNS::mlp(x = XtrinSelected, y = YtrinSelected,
size = networkSize, learnFuncParams = learnFuncParams,
maxit = maxit,
inputsTest = Xtest, targetsTest = Ytest)
predYtrain <- model$fitted.values
predYtest <- model$fittedTestValues
caret::confusionMatrix(predYtrain, YtrinSelected)
method <- get(functionName)
pos <- sample(length(Y), round((1-trainAndTestRatio) * length(Y)))
Xtrain <- X[pos, ]
Xtest <- X[-pos, ]
Ytrain <- Y[pos]
Ytest <- Y[-pos]
Qtrain <- Q[pos]
Qtest <- Q[-pos]
result <- method(X = Xtrain, Y = Ytrain, Q = Qtrain, seed = seed)
XtrainSelected <- result[['X']]
YtrainSelected <- result[['Y']]
QtrainSelected <- result[['Q']]
YtrainSelected <- RSNNS::decodeClassLabels( x = YtrainSelected)
Ytest <- RSNNS::decodeClassLabels( x = Ytest )
model <- RSNNS::mlp(x = XtrainSelected, y = YtrinSelected,
size = networkSize, learnFuncParams = learnFuncParams,
maxit = maxit,
inputsTest = Xtest, targetsTest = Ytest)
predYtrain <- model$fitted.values
predYtest <- model$fittedTestValues
confMatrixTrain <- caret::confusionMatrix(predYtrain, YtrainSelected)
method <- get(functionName)
pos <- sample(length(Y), round((1-trainAndTestRatio) * length(Y)))
Xtrain <- X[pos, ]
Xtest <- X[-pos, ]
Ytrain <- Y[pos]
Ytest <- Y[-pos]
Qtrain <- Q[pos]
Qtest <- Q[-pos]
result <- method(X = Xtrain, Y = Ytrain, Q = Qtrain, seed = seed)
XtrainSelected <- result[['X']]
YtrainSelected <- result[['Y']]
QtrainSelected <- result[['Q']]
YtrainSelected <- RSNNS::decodeClassLabels( x = YtrainSelected)
Ytest <- RSNNS::decodeClassLabels( x = Ytest )
model <- RSNNS::mlp(x = XtrainSelected, y = YtrinSelected,
size = networkSize, learnFuncParams = learnFuncParams,
maxit = maxit,
inputsTest = Xtest, targetsTest = Ytest)
model <- RSNNS::mlp(x = XtrainSelected, y = YtrainSelected,
size = networkSize, learnFuncParams = learnFuncParams,
maxit = maxit,
inputsTest = Xtest, targetsTest = Ytest)
predYtrain <- model$fitted.values
predYtest <- model$fittedTestValues
confMatrixTrain <- caret::confusionMatrix(predYtrain, YtrainSelected)
predYtrain
YtrainSelected
fitted.values
fitted.values(model)
iris$targetsTrain
fitted.values(model)
predYtrain
YtrainSelected
confMatrixTrain <- caret::confusionMatrix(predYtrain, YtrainSelected)
class9predYtrain
class(predYtrain)
class(YtrainSelected)
class(YtrainSelected[1,1])
class(predYtrain[1,1])
predYtrain
predYtrainp, 1]
predYtrain[], 1]
predYtrain[, 1]
YtrainSelected[,1]
predYtrain
max(predYtrain)
min(predYtrain)
confMatrixTrain <- caret::confusionMatrix(predYtrain, YtrainSelected)
dim(YtrainSelected)
dim(predYtrain)
confMatrixTrain <- caret::confusionMatrix(YtrainSelected, predYtrain)
YtrainSelected
predYtrain
predYtrain <- model$fitted.values
predYtest <- model$fittedTestValues
confMatrixTrain <- caret::confusionMatrix(YtrainSelected, predYtrain)
dim(YtrainSelected)
dim(YtrainSelected)
YtrainSelected
YtrainSelected
round(YtrainSelected)
confMatrixTrain <- caret::confusionMatrix(round(YtrainSelected), predYtrain)
YtrainSelected
confMatrixTrain <- caret::confusionMatrix(YtrainSelected[, 1], predYtrain[, 1])
YtrainSelected
confMatrixTest <- caret::confusionMatrix(Ytest, predYtest)
predYtest
Ytest
round(predYtest)
confMatrixTrain <- caret::confusionMatrix(YtrainSelected[, 1], predYtrain[, 1])
confMatrixTrain <- caret::confusionMatrix(YtrainSelected, predYtrain)
predYtrain
YtrainSelected
data(iris)
#shuffle the vector
iris <- iris[sample(1:nrow(iris),length(1:nrow(iris))),1:ncol(iris)]
irisValues <- iris[,1:4]
irisTargets <- decodeClassLabels(iris[,5])
#irisTargets <- decodeClassLabels(iris[,5], valTrue=0.9, valFalse=0.1)
iris <- splitForTrainingAndTest(irisValues, irisTargets, ratio=0.15)
iris <- normTrainingAndTestSet(iris)
model <- mlp(iris$inputsTrain, iris$targetsTrain, size=5, learnFuncParams=c(0.1),
maxit=50, inputsTest=iris$inputsTest, targetsTest=iris$targetsTest)
summary(model)
model
weightMatrix(model)
extractNetInfo(model)
par(mfrow=c(2,2))
plotIterativeError(model)
predictions <- predict(model,iris$inputsTest)
plotRegressionError(predictions[,2], iris$targetsTest[,2])
confusionMatrix(iris$targetsTrain,fitted.values(model))
confusionMatrix(iris$targetsTrain,fitted.values(model))
confusionMatrix(iris$targetsTest,predictions)
confusionMatrix
?confusionMatrix
confMatrixTrain <- RSNNS::confusionMatrix(YtrainSelected, predYtrain)
confMatrixTest <- RSNNS::confusionMatrix(Ytest, predYtest)
confMatrixTrain
confMatrixTrain
confMatrixTest
?caret::confusionMatrix
predYtest
caret::confusionMatrix(predYtest[, 1], Ytest[, 1])
predYtest[, 1]
caret::confusionMatrix(round(predYtest[, 1]), Ytest[, 1])
?auc
?auc
ModelMetrics::auc(actual = Ytest[, 1], predicted = predYtest[, 1])
Ytrain2 <- RSNNS::decodeClassLabels( x = Ytrain)
model <- RSNNS::mlp(x = Xtrain, y = Ytrain2,
size = networkSize, learnFuncParams = learnFuncParams,
maxit = maxit,
inputsTest = Xtest, targetsTest = Ytest)
predYtrain <- model$fitted.values
predYtest <- model$fittedTestValues
confMatrixTrain <- RSNNS::confusionMatrix(YtrainSelected, predYtrain)
confMatrixTest <- RSNNS::confusionMatrix(Ytest, predYtest)
caret::confusionMatrix(round(predYtest[, 1]), Ytest[, 1])
ModelMetrics::auc(actual = Ytest[, 1], predicted = predYtest[, 1])
functionName
file.remove('./Untitled.R')
require(tidyverse)
require(mlbench)
Data <- mlbench::mlbench.2dnormals(n = 500)
Y <- Data$classes
X <- Data$x
Y <- Data$classes
source('./src/methods.R')
Q <- getQuality(X = X, Y = as.numeric(Y) - 1)
if(!dir.exists('./Article/imgs')){
dir.create('./Article/imgs')
}
require(tidyverse)
require(mlbench)
source('./src/methods.R')
baseImgDir <- './Article/imgs'
if(!dir.exists(baseImgDir)){
dir.create(baseImgDir)
}
data.frame(X1 = X[, 1], X2 = X[, 2], Y = as.numeric(Y) - 1, Q = Q) %>%
ggplot2::ggplot(ggplot2::aes(x = X1, y = X2, color = Q)) %>%
ggplot2::geom_point()
require(tidyverse)
require(mlbench)
source('./src/methods.R')
baseImgDir <- './Article/imgs'
if(!dir.exists(baseImgDir)){
dir.create(baseImgDir)
}
Data <- mlbench::mlbench.2dnormals(n = 500)
X <- Data$x
Y <- Data$classes
Q <- getQuality(X = X, Y = as.numeric(Y) - 1)
data.frame(X1 = X[, 1], X2 = X[, 2], Y = as.numeric(Y) - 1, Q = Q) %>%
ggplot2::ggplot(ggplot2::aes(x = X1, y = X2, color = Q)) %>%
ggplot2::geom_point()
data.frame(X1 = X[, 1], X2 = X[, 2], Y = as.numeric(Y) - 1, Q = Q) %>%
ggplot2::ggplot(ggplot2::aes(x = X1, y = X2, color = Q)) %>%
ggplot2::geom_point()
data.frame(X1 = X[, 1], X2 = X[, 2], Y = as.numeric(Y) - 1, Q = Q)
data.frame(X1 = X[, 1], X2 = X[, 2], Y = as.numeric(Y) - 1, Q = Q) %>%
ggplot2::ggplot(ggplot2::aes(x = X1, y = X2, color = Q)) %>%
ggplot2::geom_point()
data.frame(X1 = X[, 1], X2 = X[, 2], Y = as.numeric(Y) - 1, Q = Q) %>%
ggplot2::ggplot(ggplot2::aes(x = X1, y = X2, color = Q)) %>%
ggplot2::geom_point()
data.frame(X1 = X[, 1], X2 = X[, 2], Y = as.numeric(Y) - 1, Q = Q) %>%
ggplot2::ggplot(ggplot2::aes(x = X1, y = X2, color = Q)) %>%
ggplot2::geom_point()
data.frame(X1 = X[, 1], X2 = X[, 2], Y = as.numeric(Y) - 1, Q = Q) %>%
ggplot2::ggplot(ggplot2::aes(x = X1, y = X2, color = Q))
data.frame(X1 = X[, 1], X2 = X[, 2], Y = as.numeric(Y) - 1, Q = Q) %>%
ggplot2::ggplot(ggplot2::aes(x = X1, y = X2, color = Q)) %>%
ggplot2::geom_point()
data.frame(X1 = X[, 1], X2 = X[, 2], Y = as.numeric(Y) - 1, Q = Q) %>%
ggplot2::ggplot(ggplot2::aes(x = X1, y = X2, color = Q)) %>%
ggplot2::geom_point()
data.frame(X1 = X[, 1], X2 = X[, 2], Y = as.numeric(Y) - 1, Q = Q) %>%
ggplot2::ggplot(ggplot2::aes(x = X1, y = X2)) %>%
ggplot2::geom_point()
require(tidyverse)
require(mlbench)
source('./src/methods.R')
baseImgDir <- './Article/imgs'
if(!dir.exists(baseImgDir)){
dir.create(baseImgDir)
}
Data <- mlbench::mlbench.2dnormals(n = 500)
X <- Data$x
Y <- Data$classes
Q <- getQuality(X = X, Y = as.numeric(Y) - 1)
Data <- data.frame(X1 = X[, 1], X2 = X[, 2], Y = as.numeric(Y) - 1, Q = Q)
Data %>%
ggplot2::ggplot(ggplot2::aes(x = X1, y = X2)) %>%
ggplot2::geom_point()
head(Data)
Data %>%
ggplot2::ggplot(ggplot2::aes(x = X1, y = X2)) %>%
ggplot2::geom_point()
Data %>%
ggplot2::ggplot(aes(x = X1, y = X2)) %>%
ggplot2::geom_point()
ggplot2::ggplot(data = Data,
ggplot2::aes(x = X1, y = X2)) %>%
ggplot2::geom_point()
ggplot2::ggplot(data = Data,
ggplot2::aes(x = X1, y = X2))
ggplot2::ggplot(data = Data,
ggplot2::aes(x = X1, y = X2)) %>%
ggplot2::geom_line()
ggplot2::ggplot(data = Data) %>%
ggplot2::geom_line(ggplot2::aes(x = X1, y = X2))
ggplot2::ggplot(data = Data)
class(Data$X1)
ggplot2::ggplot(data = Data) %>%
ggplot2::geom_line(ggplot2::aes(x = Data$X1, y = Data$X2))
ggplot2::ggplot(data = Data, ggplot2::aes(x = Data$X1, y = Data$X2)) %>%
ggplot2::geom_line()
?ggplot2
?ggplot
df <- data.frame(
gp = factor(rep(letters[1:3], each = 10)),
y = rnorm(30)
)
ds <- plyr::ddply(df, "gp", plyr::summarise, mean = mean(y), sd = sd(y))
# The summary data frame ds is used to plot larger red points on top
# of the raw data. Note that we don't need to supply `data` or `mapping`
# in each layer because the defaults from ggplot() are used.
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
# Same plot as above, declaring only the data frame in ggplot().
# Note how the x and y aesthetics must now be declared in
# each geom_point() layer.
ggplot(df) +
geom_point(aes(gp, y)) +
geom_point(data = ds, aes(gp, mean), colour = 'red', size = 3)
# Alternatively we can fully specify the plot in each layer. This
# is not useful here, but can be more clear when working with complex
# mult-dataset graphics
ggplot() +
geom_point(data = df, aes(gp, y)) +
geom_point(data = ds, aes(gp, mean), colour = 'red', size = 3) +
geom_errorbar(
data = ds,
aes(gp, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'red',
width = 0.4
)
class(Data)
ggplot2::ggplot(data = Data, ggplot2::aes(x = Data$X1, y = Data$X2))
ggplot2::ggplot(data = Data, ggplot2::aes(x = Data$X1, y = Data$X2)) %>%
ggplot2::geom_line()
plot(Data$X1, Data$X2)
/ggplot
?ggplot
ggplot2::ggplot(data = Data, ggplot2::aes(Data$X1,Data$X2)) %>%
ggplot2::geom_line()
ggplot2::ggplot(data = Data, aes(Data$X1,Data$X2)) %>%
ggplot2::geom_line()
Data %>%
ggplot2::ggplot(ggplot2::aes(x = X1, y = X2)) +
ggplot2::geom_point()
Data <- mlbench::mlbench.2dnormals(n = 500, sd = 0.1)
X <- Data$x
Y <- Data$classes
Q <- getQuality(X = X, Y = as.numeric(Y) - 1)
Data <- data.frame(X1 = X[, 1], X2 = X[, 2], Y = as.numeric(Y) - 1, Q = Q)
Data %>%
ggplot2::ggplot(ggplot2::aes(x = X1, y = X2)) +
ggplot2::geom_point()
Data <- mlbench::mlbench.2dnormals(n = 500, sd = 0.01)
X <- Data$x
Y <- Data$classes
Q <- getQuality(X = X, Y = as.numeric(Y) - 1)
Data <- data.frame(X1 = X[, 1], X2 = X[, 2], Y = as.numeric(Y) - 1, Q = Q)
Data %>%
ggplot2::ggplot(ggplot2::aes(x = X1, y = X2)) +
ggplot2::geom_point()
Data <- mlbench::mlbench.2dnormals(n = 500, sd = 0.7)
X <- Data$x
Y <- Data$classes
Q <- getQuality(X = X, Y = as.numeric(Y) - 1)
Data <- data.frame(X1 = X[, 1], X2 = X[, 2], Y = as.numeric(Y) - 1, Q = Q)
Data %>%
ggplot2::ggplot(ggplot2::aes(x = X1, y = X2)) +
ggplot2::geom_point()
Data <- mlbench::mlbench.2dnormals(n = 500, sd = 0.6)
X <- Data$x
Y <- Data$classes
Q <- getQuality(X = X, Y = as.numeric(Y) - 1)
Data <- data.frame(X1 = X[, 1], X2 = X[, 2], Y = as.numeric(Y) - 1, Q = Q)
Data %>%
ggplot2::ggplot(ggplot2::aes(x = X1, y = X2)) +
Data %>%
ggplot2::ggplot(ggplot2::aes(x = X1, y = X2)) +
ggplot2::geom_point()
Data %>%
ggplot2::ggplot(ggplot2::aes(x = X1, y = X2)) +
ggplot2::geom_point()
Data <- mlbench::mlbench.2dnormals(n = 500, sd = 0.55)
X <- Data$x
Y <- Data$classes
Q <- getQuality(X = X, Y = as.numeric(Y) - 1)
Data <- data.frame(X1 = X[, 1], X2 = X[, 2], Y = as.numeric(Y) - 1, Q = Q)
Data %>%
ggplot2::ggplot(ggplot2::aes(x = X1, y = X2)) +
ggplot2::geom_point()
Data <- mlbench::mlbench.2dnormals(n = 500, sd = 0.55)
X <- Data$x
Y <- Data$classes
Q <- getQuality(X = X, Y = as.numeric(Y) - 1)
Data <- data.frame(X1 = X[, 1], X2 = X[, 2], Y = as.numeric(Y) - 1, Q = Q)
Data %>%
ggplot2::ggplot(ggplot2::aes(x = X1, y = X2, color = Q)) +
ggplot2::geom_point()
rm(list = ls())
require('tidyverse')
require('plotly')
require('mlbench')
source('src/methods.R')
require('mnist')
data(mnist)
X <- rbind(mnist$train$x, mnist$test$x)
Y <- c(mnist$train$y, mnist$test$y)
pos5 <- Y == 5
Y[pos5] <- 1
Y[!pos5] <- 0
Q <- getQuality(X = X, Y = Y)
networkSize <- c(60, 10)
seed <- 1234
methodName <- 'briSelectionPlusPlusLogNeg'
globalResult <- data.frame()
lastSaveTS <- as.numeric(Sys.time())
itersTable <- expand.grid(dataSetName = names(DataList),
netWorkSizePos = 1:length(networkSizesList),
seed = seedsVet,
methodName = methodsNames)
iterX <- X
iterY <- Y
iterQ <- getQuality(X = X, Y = Y)
networkSize
seed
methodName
rm(list = ls())
require('tidyverse')
require('plotly')
require('mlbench')
source('src/methods.R')
require('mnist')
data(mnist)
X <- rbind(mnist$train$x, mnist$test$x)
Y <- c(mnist$train$y, mnist$test$y)
pos5 <- Y == 5
Y[pos5] <- 1
Y[!pos5] <- 0
Q <- getQuality(X = X, Y = Y)
networkSize <- c(60, 10)
seed <- 1234
methodName <- 'briSelectionPlusPlusLogNeg'
set.seed(seed)
method <- get(functionName)
pos <- sample(length(Y), round((1-trainAndTestRatio) * length(Y)))
method <- get(methodName)
pos <- sample(length(Y), round((1-trainAndTestRatio) * length(Y)))
trainAndTestRatio <- 0.3
networkSize <- c(60, 10)
seed <- 1234
methodName <- 'briSelectionPlusPlusLogNeg'
set.seed(seed)
method <- get(methodName)
pos <- sample(length(Y), round((1-trainAndTestRatio) * length(Y)))
Xtrain <- X[pos, ]
Xtest <- X[-pos, ]
Ytrain <- Y[pos]
Ytest <- Y[-pos]
Qtrain <- Q[pos]
Qtest <- Q[-pos]
result <- method(X = Xtrain, Y = Ytrain, Q = Qtrain, seed = seed)
XtrainSelected <- result[['X']]
YtrainSelected <- result[['Y']]
QtrainSelected <- result[['Q']]
YtrainSelected <- RSNNS::decodeClassLabels( x = YtrainSelected)
Ytest <- RSNNS::decodeClassLabels( x = Ytest )
maxit
maxit <- 10
Xtest
x = XtrainSelected, y = YtrainSelected,
size = networkSize, learnFuncParams = learnFuncParams,
maxit = maxit,
inputsTest = Xtest, targetsTest = Ytest
model <- RSNNS::mlp(x = XtrainSelected, y = YtrainSelected,
size = networkSize, learnFuncParams = learnFuncParams,
maxit = maxit,
inputsTest = Xtest, targetsTest = Ytest)
learnFuncParams <- 0.1
model <- RSNNS::mlp(x = XtrainSelected, y = YtrainSelected,
size = networkSize, learnFuncParams = learnFuncParams,
maxit = maxit,
inputsTest = Xtest, targetsTest = Ytest)
model
predYtrain <- model$fitted.values
predYtest <- model$fittedTestValues
trainConfMatrix <- caret::confusionMatrix(round(predYtrain[, 1]), YtrainSelected[, 1])
trainAUC <- ModelMetrics::auc(actual = YtrainSelected[, 1], predicted = predYtrain[, 1])
trainMetrics <- c(trainConfMatrix$overall, trainConfMatrix$byClass, AUC = trainAUC)
testConfMatrix <- caret::confusionMatrix(round(predYtest[, 1]), Ytest[, 1])
testAUC <- ModelMetrics::auc(actual = Ytest[, 1], predicted = predYtest[, 1])
testMetrics <- c(testConfMatrix$overall, testConfMatrix$byClass, AUC = testAUC)
results <- c(functionName = functionName,
seed = seed,
trainAndTestRatio = trainAndTestRatio,
maxit = maxit,
learnFuncParams = learnFuncParams,
expo = expo,
distanceMetric = distanceMetric,
networkSize = paste(networkSize, collapse = '-'),
train = trainMetrics, test = testMetrics)
testMetrics
testConfMatrix
model$maxit
model
trainConfMatrix
testConfMatrix
