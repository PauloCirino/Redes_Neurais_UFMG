{
    "collab_server" : "",
    "contents" : "require('tidyverse')\nrequire('RSNNS')\nrequire('pROC')\nrequire('caret')\n\nsource('./src/getCenters.R')\nsource('./src/estimateU.R')\n\ngetQuality <- function(X, Y, expo = 2, distanceMetric = 'euclidean'){\n    K <- length(unique(Y))\n    centers <- getCenters(X = X, Y = Y)\n    U <- estimateU(Data = X,\n                   centers = centers, \n                   expo = expo, \n                   distanceMetric = distanceMetric)\n    Q <- -1 * ( apply(U, 1, function(x){ 1 - (K**K) * prod(1 / x)}) )\n    Q\n}\n\nbaseLine <- function(X, Y, Q, seed = Sys.time()){\n    list(X = X %>% data.matrix(),\n         Y = Y,\n         Q = NA ) \n}\n\nbriSelection <- function(X, Y, Q, seed = Sys.time()){\n    set.seed(seed)\n    \n    Data <- data.frame(X = X, Y = Y, Q = Q)\n    \n    auxMinrityClass <- Data %>% \n        dplyr::group_by(Y) %>%\n        dplyr::summarise(count = n()) %>%\n        dplyr::top_n(n = -1, wt = count)\n    \n    minorityY <- auxMinrityClass$Y\n    minorityCount <- auxMinrityClass$count\n    \n    Data <- Data %>%\n        dplyr::group_by(Y) %>%\n        dplyr::top_n(n = minorityCount, wt = -Q) %>%\n        dplyr::ungroup() %>%\n        data.frame()\n    \n    list(X = Data %>% dplyr::select(-Q, -Y) %>% data.matrix(),\n         Y = Data$Y,\n         Q = Data$Q\n         )\n}\n\nbriSelectionPlusPlus <- function(X, Y, Q, seed = Sys.time()){\n    set.seed(seed)\n    \n    Data <- data.frame(X = X, Y = Y, Q = Q)\n    \n    auxMinrityClass <- Data %>% \n        dplyr::group_by(Y) %>%\n        dplyr::summarise(count = n()) %>%\n        dplyr::top_n(n = -1, wt = count)\n    \n    minorityY <- auxMinrityClass$Y\n    minorityCount <- auxMinrityClass$count\n        \n    Data <- Data %>%\n        dplyr::group_by(Y) %>%\n        dplyr::sample_n(size = minorityCount, replace = FALSE, weight = Q) %>%\n        dplyr::ungroup() %>%\n        data.frame()\n    \n    list(X = Data %>% dplyr::select(-Q, -Y) %>% data.matrix(),\n         Y = Data$Y,\n         Q = Data$Q\n    )\n}\n\nbriSelectionPlusPlusNeg <- function(X, Y, Q, seed = Sys.time()){\n    set.seed(seed)\n    \n    Data <- data.frame(X = X, Y = Y, Q = Q)\n    \n    auxMinrityClass <- Data %>% \n        dplyr::group_by(Y) %>%\n        dplyr::summarise(count = n()) %>%\n        dplyr::top_n(n = -1, wt = count)\n    \n    minorityY <- auxMinrityClass$Y\n    minorityCount <- auxMinrityClass$count\n    \n    Data <- Data %>%\n        dplyr::mutate(Q = 1/Q) %>%\n        dplyr::group_by(Y) %>%\n        dplyr::sample_n(size = minorityCount, replace = FALSE, weight = Q) %>%\n        dplyr::ungroup() %>%\n        data.frame()\n    \n    list(X = Data %>% dplyr::select(-Q, -Y) %>% data.matrix(),\n         Y = Data$Y,\n         Q = Data$Q\n    )\n}\n\nbriSelectionPlusPlusLog <- function(X, Y, Q, seed = Sys.time()){\n    set.seed(seed)\n    \n    Data <- data.frame(X = X, Y = Y, Q = Q)\n    \n    auxMinrityClass <- Data %>% \n        dplyr::group_by(Y) %>%\n        dplyr::summarise(count = n()) %>%\n        dplyr::top_n(n = -1, wt = count)\n    \n    minorityY <- auxMinrityClass$Y\n    minorityCount <- auxMinrityClass$count\n    \n    Data <- Data %>%\n        dplyr::mutate(Q = log(Q)) %>%\n        dplyr::group_by(Y) %>%\n        dplyr::sample_n(size = minorityCount, replace = FALSE, weight = Q) %>%\n        dplyr::ungroup() %>%\n        data.frame()\n    \n    list(X = Data %>% dplyr::select(-Q, -Y) %>% data.matrix(),\n         Y = Data$Y,\n         Q = Data$Q\n    )\n}\n\n\nbriSelectionPlusPlusLogNeg <- function(X, Y, Q, seed = Sys.time()){\n    set.seed(seed)\n    \n    Data <- data.frame(X = X, Y = Y, Q = Q)\n    \n    auxMinrityClass <- Data %>% \n        dplyr::group_by(Y) %>%\n        dplyr::summarise(count = n()) %>%\n        dplyr::top_n(n = -1, wt = count)\n    \n    minorityY <- auxMinrityClass$Y\n    minorityCount <- auxMinrityClass$count\n    \n    Data <- Data %>%\n        dplyr::mutate(Q = 1/log(Q)) %>%\n        dplyr::group_by(Y) %>%\n        dplyr::sample_n(size = minorityCount, replace = FALSE, weight = Q) %>%\n        dplyr::ungroup() %>%\n        data.frame()\n    \n    list(X = Data %>% dplyr::select(-Q, -Y) %>% data.matrix(),\n         Y = Data$Y,\n         Q = Data$Q\n    )\n}\n\nrunModel <- function(X, Y, Q, networkSize, functionName, expo = 2, distanceMetric = 'euclidean',\n                     seed = Sys.time(),\n                     learnFuncParams = 0.1, maxit = 5000, trainAndTestRatio = 0.3){\n    set.seed(seed)\n    method <- get(functionName)\n    \n    pos <- sample(length(Y), round((1-trainAndTestRatio) * length(Y)))\n    \n    Xtrain <- X[pos, ]\n    Xtest <- X[-pos, ]\n    Ytrain <- Y[pos]\n    Ytest <- Y[-pos]\n    Qtrain <- Q[pos]\n    Qtest <- Q[-pos]\n    \n    result <- method(X = Xtrain, Y = Ytrain, Q = Qtrain, seed = seed)\n    XtrainSelected <- result[['X']]\n    YtrainSelected <- result[['Y']]\n    QtrainSelected <- result[['Q']]\n    \n    \n    YtrainSelected <- RSNNS::decodeClassLabels( x = YtrainSelected)\n    Ytest <- RSNNS::decodeClassLabels( x = Ytest )\n    \n    model <- RSNNS::mlp(x = XtrainSelected, y = YtrainSelected,\n                        size = networkSize, learnFuncParams = learnFuncParams, \n                        maxit = maxit, \n                        inputsTest = Xtest, targetsTest = Ytest)\n    \n    predYtrain <- model$fitted.values\n    predYtest <- model$fittedTestValues\n    \n    trainConfMatrix <- caret::confusionMatrix(round(predYtrain[, 1]), YtrainSelected[, 1])\n    trainAUC <- ModelMetrics::auc(actual = YtrainSelected[, 1], predicted = predYtrain[, 1])\n    trainMetrics <- c(trainConfMatrix$overall, trainConfMatrix$byClass, AUC = trainAUC)\n    \n    testConfMatrix <- caret::confusionMatrix(round(predYtest[, 1]), Ytest[, 1])\n    testAUC <- ModelMetrics::auc(actual = Ytest[, 1], predicted = predYtest[, 1])\n    testMetrics <- c(testConfMatrix$overall, testConfMatrix$byClass, AUC = testAUC)\n    \n    results <- c(functionName = functionName,\n                 seed = seed,\n                 trainAndTestRatio = trainAndTestRatio,\n                 maxit = maxit,\n                 learnFuncParams = learnFuncParams,\n                 expo = expo,\n                 distanceMetric = distanceMetric,\n                 networkSize = paste(networkSize, collapse = '-'),\n                 train = trainMetrics, test = testMetrics)\n\n}\n\n\nrunAllTests <- function(DataList,\n                        networkSizesList,\n                        seedsVet,\n                        methodsNames = c('baseLine', 'briSelection',\n                                         'briSelectionPlusPlus', \n                                         'briSelectionPlusPlusNeg', \n                                         'briSelectionPlusPlusLog',\n                                         'briSelectionPlusPlusLogNeg'),\n                        saveFile = paste('save_', Sys.Date(), '.csv', sep = ''),\n                        echoEachNMin = 1){\n    itersTable <- expand.grid(dataSetName = names(DataList),\n                              netWorkSizePos = 1:length(networkSizesList),\n                              seed = seedsVet,\n                              methodName = methodsNames)\n    globalResult <- data.frame()\n    lastSaveTS <- as.numeric(Sys.time())\n    for(i in 1:nrow(itersTable)){\n        iterData <- itersTable[i, ]\n        \n        DataSet <- DataList[[iterData$dataSetName]]\n        iterX <- DataSet$X\n        iterY <- DataSet$Y\n        iterQ <- getQuality(X = iterX, Y = iterY)\n        \n        networkSize <- networkSizesList[[iterData$netWorkSizePos]]\n        seed <- iterData$seed\n        methodName <- iterData$methodName\n        \n        iterResult <- runModel(X = iterX, Y = iterY, Q = iterQ, \n                               networkSize = networkSize,\n                               functionName = methodName,\n                               seed = seed)\n        globalResult[i, ] <- c( dataSetName = iterData$dataSetName,\n                                iterResult)\n        write.csv(x = c( dataSetName = iterData$dataSetName, iterResult),\n                  file = saveFile,\n                  append = TRUE)\n        \n        if(as.numeric(Sys.time()) - lastSaveTS > 60 * saveEachNMin){\n            cat('Iter ', i, '- At', as.character(Sys.time()))\n            print(globalResult)\n            \n        }\n    }\n}",
    "created" : 1507032153173.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "77080200",
    "id" : "1680989C",
    "lastKnownWriteTime" : 1507121414,
    "last_content_update" : 1507121414026,
    "path" : "~/Desktop/Facudade/RedesNeurais/TrabalhoParcial/src/methods.R",
    "project_path" : "src/methods.R",
    "properties" : {
        "source_window_id" : "",
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}